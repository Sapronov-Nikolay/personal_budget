Проект для ведения бюджета.
==================================================================
Построен на postgresql версии 17.4
==================================================================
Сменить кодировку консоли
  chcp 1251

Создана резервная копия БД (backup.sql):
  pg_dump -U budgetbooss -d personal_budget -F p -b -v --encoding=UTF8 > backup.sql
  Пояснения по этой команде:
    -U budgetbooss — ваш пользователь PostgreSQL.
    -d personal_budget — имя базы данных.
    --encoding=UTF8 — избегает проблем с кодировкой.

Восстановление данные из резервной копии:
  psql -U budgetbooss -d personal_budget -f backup.sql

Пересоздать БД (если нужно):
  dropdb -U budgetbooss personal_budget && createdb -U budgetbooss personal_budget

Выйти из psql
  \q

                Важно!!!

Команды pg_dump, createdb, dropdb выполняются вне сессии psql (в обычной командной строке).
Если пароль не запрашивается, добавьте его в переменные окружения:
  set PGPASSWORD=quein
==================================================================
Если нужно переустановить зависимости или обновить их.
  Нужно быть в среде, где venv - это имя среды. Имя среды может быть другим, взависимости от того как её назвали при создании.

  (Для Linux/MacOS):
    source venv/bin/activate

  (Для Windows):
    venv\Scripts\activate

  Если при запуске терминала оказались в другой среде Например SapronovCompany:
    1. (SapronovCompany) I:\Mi docum\Personal_Budget>
        (SapronovCompany) I:\Mi docum\Personal_Budget>deactivate    # Введите: deactivate

    2. I:\Mi docum\Personal_Budget>
        I:\Mi docum\Personal_Budget>cd budget   # Перейдите при помощи cd в папку проекта где лежит папка со средой и manage.py

    3. I:\Mi docum\Personal_Budget\budget>
        I:\Mi docum\Personal_Budget\budget>.\venv\Scripts\activate    # Введите: .\venv\Scripts\activate

    4. (venv) I:\Mi docum\Personal_Budget\budget>
        (venv) I:\Mi docum\Personal_Budget\budget>python manage.py runserver    # Далее запустите проект командой python manage.py runserver или работайте с другими командами.


  Если нужно обновить pip, то:
    python -m pip install --upgrade pip

    Команда pip install --upgrade требует указать название пакета для обновления. Например:
      pip install --upgrade django  # ✅ правильно
      pip install --upgrade         # ❌ ошибка (нет аргументов)

  Обновить конкретный пакет:
    pip install --upgrade имя_пакета

  Обновить все пакеты зависимостей:
    pip list --outdated | awk 'NR>2 {print $1}' | xargs -n1 pip install --upgrade
  Или если в Для Windows используйте PowerShell:
    pip list --outdated | ForEach-Object { $_.Split(' ')[0] } | ForEach-Object { pip install --upgrade $_ }

  Сгенерируйте новый requirements.txt:
    pip install -r requirements.txt

  Теперь можно поставить или обновить зависимости из requirements.txt при переходе в проект на другом носителе:
    pip uninstall -r requirements.txt -y

Если вы используете pipenv или poetry, то:
  Для pipenv:
    pipenv update

  Для poetry:
    poetry update
==================================================================
Пример структуры проекта при подготовке к загрузки в GitHub
budget/
├── .gitignore
├── manage.py
├── requirements.txt
├── venv/                  <-- Виртуальная среда
└── CORE/
    ├── __init__.py
    ├── settings.py        <-- Импортирует SECRET_KEY из secretkey.py
    ├── secretkey.py       <-- Здесь!
    ├── urls.py
    └── ...

1. Создание репозитория на GitHub с именем personal_budget
2. Локальная настройка Git. Активация виртуальной среды:
  cd I:\Mi docum\Personal_Budget\budget.\venv\Scripts\activate  # Для Windows
3. Инициализация репозитория:
  git init
  git add .
  git commit -m "Initial commit: полная заливка проекта"
4. Подключение к GitHub:
  git remote add origin https://github.com/Sapronov-Nikolay/personal_budget.git
5. Загрузка проекта на GitHub:
  Определение имени ветки:
    git branch
  Когда ветка определена, например, master:
    git push -u origin master  # Если локальная ветка называется master
  Если надо переименовать ветку:
    git branch -m master main  # Переименовать ветку
  Затем вести команду с новым именем
    git push -u origin main    # Запушить изменения
  Если надо создать ветку:
    Создайте первый коммит:
      git add .
      git commit -m "Initial commit"  # Нужно делать с сообщением, заключив его в кавычки если внём есть спецсимволы или пробелы ""
    Создайте саму ветку, например main:
      git branch -M main # или master
    Затем вести команду с новым именем:
      git push -u origin main # или master
  Если возникает конфликт ветки:
    git pull origin main --allow-unrelated-histories
    git push -u origin main # Или master если имя ветки master. Или иное имя.

Пример рабочего процесса
  # Добавьте все изменения
    git add .

  # Сделайте коммит с сообщением
    git commit -m "Реализована функциональность расходов"

  # Загрузите изменения в GitHub
    git push

                        Важно!!!
Сообщение коммита должно быть кратким и информативным (например: "Исправлена ошибка авторизации", "Добавлена страница профиля").
Если не использовать -m, Git откроет текстовый редактор для ввода сообщения.
==================================================================
Список основных команд Git с пояснениями:

Настройка Git

  Устанавливает имя пользователя для всех репозиториев на этом компьютере.
    git config --global user.name "Ваше Имя"

  Устанавливает email пользователя.
    git config --global user.email "ваш@email.com"
  Показывает текущие настройки Git.
    git config --list

Создание и клонирование репозиториев

  Инициализирует новый локальный репозиторий в текущей папке.
    git init
  Клонирует удалённый репозиторий на ваш компьютер.
    git clone https://github.com/username/repo.git

Основные операции

  Показывает состояние файлов: какие изменены, добавлены или удалены.
    git status
  Добавляет все изменения в индекс (подготавливает их к коммиту).
    git add .
  Добавляет конкретный файл в индекс.
    git add файл.txt
  Сохраняет изменения в истории с указанным сообщением.
    git commit -m "Сообщение коммита"
  Отправляет локальные изменения в удалённый репозиторий (ветка main).
    git push -u origin main
  Загружает изменения из удалённого репозитория и объединяет их с локальными.
    git pull

Ветвление

  Показывает список локальных веток.
    git branch
  Создает новую ветку.
    git branch новая_ветка
  Переключается на указанную ветку.
    git checkout ветка
  Объединяет изменения из указанной ветки с текущей.
    git merge ветка
  Удаляет локальную ветку.
    git branch -d ветка

История изменений

  Показывает историю коммитов.
    git log
  Показывает сокращённую историю (хеш и сообщение).
    git log --oneline
  Показывает различия между текущими и закоммиченными файлами.
    git diff

Отмена изменений

  Отменяет изменения в файле (если они не добавлены в индекс).
    git restore файл.txt
  Убрать файл из индекса
    git restore --staged путь/к/файлу
  Отменяет все незакоммиченные изменения.
    git reset --hard HEAD
  Создает новый коммит, отменяющий изменения из указанного коммита.
    git revert хеш_коммита

Работа с удалёнными репозиториями

  Привязывает локальный репозиторий к удалённому.
    git remote add origin https://github.com/username/repo.git
  Показывает список привязанных удалённых репозиториев.
    git remote -v
  Загружает изменения из удалённого репозитория, но не объединяет их.
    git fetch
  Принудительно перезаписывает историю на удалённом репозитории (используйте осторожно!).
    git push --force

Полезные советы

Сообщения коммитов
Пишите короткие и понятные сообщения, например:
  git commit -m "Добавлена страница входа".

Частые коммиты
Делите изменения на мелкие логические части.

Игнорируйте ненужные файлы
Используйте .gitignore, чтобы исключить бинарные файлы, зависимости и секреты.


Используйте git add путь/к/файлу для точечных изменений.

git add . — когда все изменения логически связаны.

Всегда проверяйте статус (git status) перед коммитом!
==================================================================

==================================================================